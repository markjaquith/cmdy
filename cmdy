#!/bin/zsh
CMDY_DIR=~/.cmdy
CMDY_COMMANDS_DIR="${CMDY_DIR}/commands"
CHOOSE_PROMPT="→ "

local flag_help flag_verbose

function printUsage() {
	local usage=(
		"Usage:"
		" "
		"cmdy"
		"cmdy create"
		"cmdy edit"
		"cmdy delete"
	)

	local info=(
		" ██████ ███    ███ ██████  ██    ██ "
		"██      ████  ████ ██   ██  ██  ██  "
		"██      ██ ████ ██ ██   ██   ████   "
		"██      ██  ██  ██ ██   ██    ██    "
 		" ██████ ██      ██ ██████     ██    "
		" "
		"Your friendly command manager"
		" "
		"(it’s pronounced “commandy”)"
		" "
		"ⓒ 2022 Mark Jaquith"
	)

	gum style \
		--foreground 212 --border-foreground 212 --border rounded \
		--align center --width 50 --margin "1 1 0 1" --padding "1 2" \
		$info

	gum style \
		--foreground 212 --border-foreground 212 --border none \
		--align left --width 50 --margin "0" --padding "1 2"\
		$usage
}

function editInstructions() {
	EDIT_INSTRUCTIONS="Press Esc to save"
	gum style --italic --faint "${EDIT_INSTRUCTIONS}"
}

function clearEditInstructions() {
	printf "\33[A[2K\r"
	printf "%*s\r" $(printf $EDIT_INSTRUCTIONS | wc -m)
}

function createCommand() {
	name=$(gum input --prompt "Command name: " --placeholder="A short description of your command")
	if [[ -z $name ]]; then
		print '{{ Color "#ff0000" "❌ You must provide a name for your command" }}' | gum format -t template
		exit 1
	fi
	safeName=$(printf $name | sed 's/\./+dot+/g' | sed 's/\//+slash+/g')
	command="${CMDY_COMMANDS_DIR}/${safeName}"

	editInstructions
	body=$(printf "#!/bin/zsh\n\n" | gum write --prompt "" --base.border rounded --height=10 --show-line-numbers --line-number.foreground 194 --cursor-line-number.foreground 194)
	
	if [[ $? -ne 0 ]];then
		clearEditInstructions
		print '{{ Color "#ff0000" "❌ Aborted command creation" }}' | gum format -t template
		exit 1
	fi

	clearEditInstructions

	print $body > $command
	chmod +x $command

	printf "✅ Created “${name}”\n"
}

function editCommand() {
	name=$(chooseCommand)
	if [[ -z $name ]];then
		print '{{ Color "#ff0000" "❌ No command was chosen" }}' | gum format -t template
		exit 1
	fi
	safeName=$(printf $name | sed 's/\./+dot+/g' | sed 's/\//+slash+/g')
	command="${CMDY_COMMANDS_DIR}/${safeName}"

	editInstructions
	body=$(cat $command | gum write --prompt "" --base.border rounded --height=10 --show-line-numbers --line-number.foreground 194 --cursor-line-number.foreground 194)

	if [[ $? -ne 0 ]];then
		clearEditInstructions
		print '{{ Color "#ff0000" "❌ Aborted command editing" }}' | gum format -t template
		exit 1
	fi

	clearEditInstructions

	print $body > $command
	chmod +x $command

	printf "✅ Edited “${name}”\n"
}

function deleteCommand() {
	name=$(chooseCommand)
	if [[ -z $name ]];then
		print '{{ Color "#ff0000" "❌ No command was chosen" }}' | gum format -t template
		exit 1
	fi
	safeName=$(printf $name | sed 's/\./+dot+/g' | sed 's/\//+slash+/g')
	command="${CMDY_COMMANDS_DIR}/${safeName}"
	gum confirm "Delete command?" && rm "${command}" && printf "✅ Deleted “${name}”\n"
}

function chooseCommand() {
	commandCount=$(ls "$CMDY_COMMANDS_DIR" | wc -l)

	if [[ $commandCount -lt 1 ]]; then
		exit 0
	fi
	ls $CMDY_COMMANDS_DIR | sed 's/+dot+/./g' | sed 's/+slash+/\//g' | gum filter --placeholder="Filter commands" --prompt="$CHOOSE_PROMPT"
}

zmodload zsh/zutil
zparseopts -D -F -K -- \
	{h,-help}=flag_help \
	{v,-verbose}=flag_verbose ||
	return 1

[[ -z "$flag_help" ]] || { printUsage && return }

if (( $#flag_verbose )); then
       print "verbose mode"
fi

# Do setup.
mkdir -p ~/.cmdy/commands

if [[ $1 = 'create' ]];then
	createCommand
elif [[ $1 = 'delete' ]];then
	deleteCommand
elif [[ $1 = 'edit' ]];then
	editCommand
else
	name=$(chooseCommand)

	if [[ -n $name ]];then
		safeName=$(printf $name | sed 's/\./+dot+/g' | sed 's/\//+slash+/g')
		"${CMDY_COMMANDS_DIR}/${safeName}"
	fi
fi
